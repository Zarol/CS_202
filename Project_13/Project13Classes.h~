#ifndef PROJECT_13_CLASSES_H_
#define PROJECT_13_CLASSES_H_
#include <stdlib.h>
#include <iostream>

using namespace std;

class ListA
{
	public:
		ListA(int);
		ListA(const ListA&);
		~ListA();
		bool gotoBeginning();
		bool gotoEnd();
		bool gotoNext();
		bool gotoPrior();
		bool insertAfter(int);
		bool insertBefore(int);
		bool remove(int&);
		bool replace(int);
		bool getCursor(int&) const;
		bool empty() const;
		bool full() const;
		bool clear();
		ListA& operator=(const ListA&);
		friend ostream& operator<<(ostream&, const ListA&);
		bool operator==(const ListA&) const;
	private:
		int size;
		int actual;
		int cursor;
		int* data;
};

class Node
{
	public:
		Node(int, Node*);
		int data;
		Node* next;
};

class ListN
{
	public:
		ListN(int);
		ListN(const ListN&);
		~ListN();
		bool gotoBeginning();
		bool gotoEnd();
		bool gotoNext();
		bool gotoPrior();
		bool insertAfter(int);
		bool insertBefore(int);
		bool remove(int&);
		bool replace(int);
		bool getCursor(int&) const;
		bool empty() const;
		bool full() const;
		bool clear();
		ListN& operator=(const ListN&);
		friend ostream& operator<<(ostream&, const ListN&);
		bool operator==(const ListN&) const;
	private:
		Node* head;
		Node* cursor;
};

#endif
